"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[215],{6244:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>o});var t=n(4848),i=n(8453);const r={},a=void 0,l={id:"java/java-generalite",title:"java-generalite",description:"JVM :",source:"@site/docs/java/java-generalite.md",sourceDirName:"java",slug:"/java/java-generalite",permalink:"/tech-watch-hub/docs/java/java-generalite",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"architecture",permalink:"/tech-watch-hub/docs/conception/architecture"},next:{title:"java-generalite1",permalink:"/tech-watch-hub/docs/java/java-generalite1"}},c={},o=[{value:"JVM :",id:"jvm-",level:2},{value:"Qu\u2019est-ce qu\u2019une exception ? D\xe9crivez bri\xe8vement les deux types d\u2019exception utilis\xe9s dans le code en Java",id:"quest-ce-quune-exception--d\xe9crivez-bri\xe8vement-les-deux-types-dexception-utilis\xe9s-dans-le-code-en-java",level:2},{value:"\u2013 Que sont les classes d\u2019emballage (aussi appel\xe9es classes d\u2019enveloppe ou wrapper classes)? Citez deux d\u2019entre elles et leur primitif correspondant. Comment chacun se rapporte-t-il \xe0 un objet ?",id:"-que-sont-les-classes-demballage-aussi-appel\xe9es-classes-denveloppe-ou-wrapper-classes-citez-deux-dentre-elles-et-leur-primitif-correspondant-comment-chacun-se-rapporte-t-il-\xe0-un-objet-",level:2}];function u(e){const s={h2:"h2",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"jvm-",children:"JVM :"}),"\n",(0,t.jsx)(s.p,{children:"-La JVM est une machine virtuelle qui permet \xe0 l'ordinateur d'ex\xe9cuter des programmes\r\nJava qui ont \xe9t\xe9 compil\xe9s en bytecode. Le bytecode est ind\xe9pendant de la plate-forme, et\r\ns'ex\xe9cute sur tout ordinateur qui h\xe9berge une JVM.\r\n-Il comprend un compilateur juste \xe0\r\ntemps (JIT) qui convertit le bytecode en instructions en langage machine, permettant aux\r\napplications de s'ex\xe9cuter aussi rapidement qu'un ex\xe9cutable natif"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"En java quelle difference entre methode public priv\xe9e et protected"})}),"\n",(0,t.jsx)(s.p,{children:"En Java, les mots-cl\xe9s public, private et protected sont des modificateurs d'acc\xe8s utilis\xe9s pour sp\xe9cifier la port\xe9e (ou la visibilit\xe9) des membres d'une classe (m\xe9thodes, variables, etc.). Voici les diff\xe9rences entre ces trois modificateurs :"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"- Public (public) :"}),"\r\nUne m\xe9thode ou un champ d\xe9clar\xe9 comme public est accessible de n'importe o\xf9, que ce soit \xe0 l'int\xe9rieur de la classe, \xe0 l'ext\xe9rieur de la classe dans le m\xeame package, ou \xe0 l'ext\xe9rieur du package.\r\nCela signifie que la m\xe9thode ou le champ peut \xeatre utilis\xe9 par d'autres classes sans aucune restriction."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"- Private (private) :"}),"\r\nUne m\xe9thode ou un champ d\xe9clar\xe9 comme private est accessible uniquement \xe0 l'int\xe9rieur de la classe o\xf9 il est d\xe9clar\xe9.\r\nCela signifie qu'il ne peut pas \xeatre acc\xe9d\xe9 directement par une autre classe, m\xeame si elle est dans le m\xeame package."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"- Protected (protected) :"}),"\r\nUne m\xe9thode ou un champ d\xe9clar\xe9 comme protected est accessible \xe0 la fois dans la classe o\xf9 il est d\xe9fini, dans toutes les sous-classes (m\xeame si elles sont dans un package diff\xe9rent), et dans d'autres classes du m\xeame package.\r\nIl est similaire au mode default (ou sans modificateur) en ce sens qu'il autorise l'acc\xe8s \xe0 d'autres classes dans le m\xeame package. La diff\xe9rence r\xe9side dans le fait qu'il autorise \xe9galement l'acc\xe8s aux sous-classes m\xeame si elles sont situ\xe9es dans un package diff\xe9rent.\r\nEn r\xe9sum\xe9 :"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"public : accessible partout."}),"\n",(0,t.jsx)(s.li,{children:"private : accessible uniquement dans la classe."}),"\n",(0,t.jsx)(s.li,{children:"protected : accessible dans la classe, dans ses sous-classes et dans le m\xeame package."}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"quest-ce-quune-exception--d\xe9crivez-bri\xe8vement-les-deux-types-dexception-utilis\xe9s-dans-le-code-en-java",children:"Qu\u2019est-ce qu\u2019une exception ? D\xe9crivez bri\xe8vement les deux types d\u2019exception utilis\xe9s dans le code en Java"}),"\n",(0,t.jsx)(s.p,{children:"En Java, une exception est une anomalie ou une situation impr\xe9vue qui se produit pendant l'ex\xe9cution d'un programme.\r\nLorsqu'une exception se produit, elle interrompt normalement le flux normal du programme et peut \xeatre g\xe9r\xe9e par des m\xe9canismes sp\xe9cifiques de gestion des erreurs.\r\nIl existe deux types d'exceptions en Java :"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"- Exceptions v\xe9rifi\xe9es (checked exceptions) :"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Les exceptions v\xe9rifi\xe9es sont des exceptions qui doivent \xeatre soit captur\xe9es (avec un bloc try-catch) soit d\xe9clar\xe9es dans la signature de la m\xe9thode (avec une clause throws)."}),"\n",(0,t.jsx)(s.li,{children:"Ces exceptions sont g\xe9n\xe9ralement utilis\xe9es pour signaler des conditions qui peuvent survenir lors de l'ex\xe9cution d'une m\xe9thode, mais qui sont hors du contr\xf4le du programmeur (par exemple, les erreurs d'entr\xe9e-sortie)."}),"\n",(0,t.jsx)(s.li,{children:"Les classes d'exceptions v\xe9rifi\xe9es h\xe9ritent de la classe Exception ou de ses sous-classes, \xe0 l'exception des classes RuntimeException et de ses sous-classes."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"- Exceptions non v\xe9rifi\xe9es (unchecked exceptions) :"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Les exceptions non v\xe9rifi\xe9es sont des exceptions qui n'ont pas besoin d'\xeatre d\xe9clar\xe9es dans la signature de la m\xe9thode ou d'\xeatre captur\xe9es explicitement."}),"\n",(0,t.jsx)(s.li,{children:"Elles sont souvent utilis\xe9es pour signaler des erreurs de programmation, telles que les divisions par z\xe9ro, les acc\xe8s \xe0 des indices de tableau inexistant, etc."}),"\n",(0,t.jsx)(s.li,{children:"Les classes d'exceptions non v\xe9rifi\xe9es h\xe9ritent de la classe RuntimeException ou de ses sous-classes."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"En r\xe9sum\xe9, les exceptions v\xe9rifi\xe9es doivent \xeatre g\xe9r\xe9es explicitement dans le code, tandis que les exceptions non v\xe9rifi\xe9es peuvent \xeatre ignor\xe9es (mais ce n'est g\xe9n\xe9ralement pas une bonne pratique) car elles sont souvent le r\xe9sultat d'erreurs de programmation qui devraient \xeatre corrig\xe9es."}),"\n",(0,t.jsx)(s.h2,{id:"-que-sont-les-classes-demballage-aussi-appel\xe9es-classes-denveloppe-ou-wrapper-classes-citez-deux-dentre-elles-et-leur-primitif-correspondant-comment-chacun-se-rapporte-t-il-\xe0-un-objet-",children:"\u2013 Que sont les classes d\u2019emballage (aussi appel\xe9es classes d\u2019enveloppe ou wrapper classes)? Citez deux d\u2019entre elles et leur primitif correspondant. Comment chacun se rapporte-t-il \xe0 un objet ?"}),"\n",(0,t.jsx)(s.p,{children:"Les classes d'emballage (ou wrapper classes en anglais) en Java sont des classes qui enveloppent (ou encapsulent) les types de donn\xe9es primitifs Java. Elles permettent de traiter les types primitifs comme des objets. Chaque type primitif a sa classe d'emballage correspondante. Ces classes fournissent des m\xe9thodes utiles pour travailler avec les types primitifs comme s'ils \xe9taient des objets, notamment pour effectuer des op\xe9rations de conversion, de comparaison, etc.\r\nDeux exemples de classes d'emballage et leur type primitif correspondant sont les suivants :"}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Integer :"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Type primitif correspondant : int"}),"\n",(0,t.jsx)(s.li,{children:"Integer permet de repr\xe9senter des valeurs enti\xe8res et fournit des m\xe9thodes pour effectuer des op\xe9rations arithm\xe9tiques, des conversions de cha\xeenes, etc."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Double :"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Type primitif correspondant : double"}),"\n",(0,t.jsx)(s.li,{children:"Double permet de repr\xe9senter des valeurs d\xe9cimales en double pr\xe9cision et fournit des m\xe9thodes similaires \xe0 Integer pour les op\xe9rations arithm\xe9tiques, les conversions de cha\xeenes, etc."}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Chaque instance de ces classes d'emballage enveloppe un seul objet de type primitif. Par exemple, si vous avez besoin de stocker un entier dans une collection Java qui accepte uniquement des objets (comme ArrayList), vous pouvez utiliser la classe d'emballage Integer pour envelopper votre entier. De m\xeame, si vous souhaitez utiliser des m\xe9thodes sp\xe9cifiques aux objets sur un type primitif, vous pouvez utiliser la classe d'emballage correspondante pour cela. En Java, gr\xe2ce \xe0 l'autoboxing et au unboxing, vous pouvez souvent passer de fa\xe7on transparente entre les types primitifs et leurs classes d'emballage correspondantes sans avoir \xe0 effectuer explicitement la conversion."})]})}function d(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>l});var t=n(6540);const i={},r=t.createContext(i);function a(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);