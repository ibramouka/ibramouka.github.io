"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[408],{202:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>a});var r=s(4848),t=s(8453);const i={},l=void 0,o={id:"java/operat-streams",title:"operat-streams",description:"Les op\xe9rations sur les streams en Java, avec exemple :",source:"@site/docs/java/operat-streams.md",sourceDirName:"java",slug:"/java/operat-streams",permalink:"/tech-watch-hub/docs/java/operat-streams",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"java-generalite1",permalink:"/tech-watch-hub/docs/java/java-generalite1"}},c={},a=[{value:"Les op\xe9rations sur les streams en Java, avec exemple :",id:"les-op\xe9rations-sur-les-streams-en-java-avec-exemple-",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"les-op\xe9rations-sur-les-streams-en-java-avec-exemple-",children:"Les op\xe9rations sur les streams en Java, avec exemple :"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Filtrage (filter)"}),": Permet de filtrer les \xe9l\xe9ments d'un flux en fonction d'un pr\xe9dicat.\r\n",(0,r.jsx)(n.code,{children:"List<Integer>"})," numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"List<Integer>"})," evenNumbers = numbers.stream()\r\n.filter(num -> num % 2 == 0)\r\n.collect(Collectors.toList());\r\nSystem.out.println(evenNumbers); // Affiche : [2, 4, 6, 8, 10]"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mapping (map)"}),": Transforme chaque \xe9l\xe9ment d'un flux en un autre \xe9l\xe9ment en appliquant une fonction.\r\n",(0,r.jsx)(n.code,{children:"List<String>"}),' names = Arrays.asList("Alice", "Bob", "Charlie", "David");']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"List<Integer>"})," nameLengths = names.stream()\r\n.map(String::length)\r\n.collect(Collectors.toList());"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"System.out.println(nameLengths); // Affiche : [5, 3, 7, 5]"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"R\xe9duction (reduce)"}),": R\xe9duit les \xe9l\xe9ments d'un flux \xe0 une seule valeur en appliquant une op\xe9ration associative.\r\n",(0,r.jsx)(n.code,{children:"List<Integer>"})," numbers = Arrays.asList(1, 2, 3, 4, 5);"]}),"\n",(0,r.jsx)(n.p,{children:"int sum = numbers.stream()\r\n.reduce(0, Integer::sum);\r\nSystem.out.println(sum); // Affiche : 15 (la somme de tous les nombres)"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Tri (sorted)"}),": Trie les \xe9l\xe9ments d'un flux en utilisant un comparateur."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"List<String>"}),' fruits = Arrays.asList("Banane", "Pomme", "Orange", "Fraise");']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"List<String>"})," sortedFruits = fruits.stream()\r\n.sorted()\r\n.collect(Collectors.toList());"]}),"\n",(0,r.jsx)(n.p,{children:"System.out.println(sortedFruits); // Affiche : [Banane, Fraise, Orange, Pomme]"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Limitation (limit)"}),": Limite le nombre d'\xe9l\xe9ments dans un flux.\r\n",(0,r.jsx)(n.code,{children:"List<Integer>"})," numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"List<Integer>"})," firstThreeNumbers = numbers.stream()\r\n.limit(3)\r\n.collect(Collectors.toList());"]}),"\n",(0,r.jsx)(n.p,{children:"System.out.println(firstThreeNumbers); // Affiche : [1, 2, 3]"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Aplatir (flatMap)"}),": Transforme chaque \xe9l\xe9ment d'un flux en un flux de z\xe9ro ou plusieurs \xe9l\xe9ments, puis fusionne ces flux en un seul flux.\r\n",(0,r.jsx)(n.code,{children:"List<List<Integer>>"})," listOfLists = Arrays.asList(\r\nArrays.asList(1, 2, 3),\r\nArrays.asList(4, 5, 6),\r\nArrays.asList(7, 8, 9)\r\n);"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"List<Integer>"})," flattenedList = listOfLists.stream()\r\n.flatMap(List::stream)\r\n.collect(Collectors.toList());\r\nSystem.out.println(flattenedList); // Affiche : [1, 2, 3, 4, 5, 6, 7, 8, 9]"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:'// Cr\xe9ation de quelques objets Personne avec des num\xe9ros de t\xe9l\xe9phone\r\nPersonne personne1 = new Personne("Alice", Arrays.asList("111-111-1111", "222-222-2222"));\r\nPersonne personne2 = new Personne("Bob", Arrays.asList("333-333-3333", "444-444-4444"));\r\nPersonne personne3 = new Personne("Charlie", Arrays.asList("555-555-5555", "666-666-6666"));'}),"\n",(0,r.jsxs)(n.p,{children:["// Cr\xe9ation d'une liste de personnes\r\n",(0,r.jsx)(n.code,{children:"List<Personne>"})," personnes = Arrays.asList(personne1, personne2, personne3);"]}),"\n",(0,r.jsxs)(n.p,{children:["// Utilisation de flatMap pour obtenir une liste de tous les num\xe9ros de t\xe9l\xe9phone\r\n",(0,r.jsx)(n.code,{children:"List<String>"})," tousNumerosTelephone = personnes.stream()\r\n.flatMap(personne -> personne.getNumerosTelephone().stream())\r\n.collect(Collectors.toList());"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Tout v\xe9rifier (allMatch)"}),": V\xe9rifie si tous les \xe9l\xe9ments d'un flux satisfont un pr\xe9dicat.\r\n",(0,r.jsx)(n.code,{children:"List<Integer>"})," numbers = Arrays.asList(2, 4, 6, 8, 10);"]}),"\n",(0,r.jsxs)(n.p,{children:["boolean allEven = numbers.stream()\r\n.allMatch(num -> num % 2 == 0);\r\n",(0,r.jsx)(n.code,{children:"System.out.println(allEven); // Affiche : true"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Any v\xe9rifier (anyMatch)"}),": V\xe9rifie si au moins un \xe9l\xe9ment d'un flux satisfait un pr\xe9dicat.\r\n",(0,r.jsx)(n.code,{children:"List<Integer>"})," numbers = Arrays.asList(1, 2, 3, 4, 5);"]}),"\n",(0,r.jsx)(n.p,{children:"boolean anyEven = numbers.stream()\r\n.anyMatch(num -> num % 2 == 0);\r\nSystem.out.println(anyEven); // Affiche : true"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Aucun v\xe9rifier (noneMatch)"}),": V\xe9rifie si aucun \xe9l\xe9ment d'un flux ne satisfait un pr\xe9dicat.\r\n",(0,r.jsx)(n.code,{children:"List<Integer>"})," numbers = Arrays.asList(1, 3, 5, 7, 9);"]}),"\n",(0,r.jsx)(n.p,{children:"boolean noneEven = numbers.stream()\r\n.noneMatch(num -> num % 2 == 0);\r\nSystem.out.println(noneEven); // Affiche : true"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Trouver le premier (findFirst) : Trouve le premier \xe9l\xe9ment d'un flux.\r\n",(0,r.jsx)(n.code,{children:"List<Integer>"})," numbers = Arrays.asList(5, 3, 7, 2, 8);"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Optional<Integer>"})," firstNumber = numbers.stream().findFirst();"]}),"\n",(0,r.jsx)(n.p,{children:"firstNumber.ifPresent(System.out::println); // Affiche le premier \xe9l\xe9ment de la liste"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Sauter (skip)"}),": Ignore les premiers \xe9l\xe9ments d'un flux et retourne un flux contenant les \xe9l\xe9ments restants.\r\n",(0,r.jsx)(n.code,{children:"List<Integer>"})," numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"List<Integer>"})," skippedNumbers = numbers.stream()\r\n.skip(5)\r\n.collect(Collectors.toList());"]}),"\n",(0,r.jsx)(n.p,{children:"System.out.println(skippedNumbers); // Affiche : [6, 7, 8, 9, 10]"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Grouper par (groupingBy)"}),": Regroupe les \xe9l\xe9ments d'un flux en fonction d'une propri\xe9t\xe9 donn\xe9e.\r\n",(0,r.jsx)(n.code,{children:"List<String>"}),' names = Arrays.asList("Alice", "Bob", "Charlie", "David", "Anna", "Alex");']}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Map<Character, List<String>>"})," groupedByNameLength = names.stream()\r\n.collect(Collectors.groupingBy(name -> name.charAt(0)));"]}),"\n",(0,r.jsxs)(n.p,{children:["System.out.println(groupedByNameLength); // Affiche : ",(0,r.jsx)(n.code,{children:"{A=[Alice, Anna, Alex], B=[Bob], C=[Charlie], D=[David]}"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Compter (count)"}),": Compte le nombre d'\xe9l\xe9ments dans un flux.\r\n",(0,r.jsx)(n.code,{children:"List<String>"}),' fruits = Arrays.asList("Apple", "Banana", "Orange", "Grape", "Pineapple");']}),"\n",(0,r.jsx)(n.p,{children:"long count = fruits.stream().count();\r\nSystem.out.println(count); // Affiche : 5"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Max (max) et Min (min)"})," : Retourne le plus grand et le plus petit \xe9l\xe9ment respectivement, en fonction d'un comparateur donn\xe9.\r\n",(0,r.jsx)(n.code,{children:"List<Integer>"})," numbers = Arrays.asList(5, 8, 2, 10, 3);"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Optional<Integer>"})," maxNumber = numbers.stream().max(Integer::compareTo);\r\n",(0,r.jsx)(n.code,{children:"Optional<Integer>"})," minNumber = numbers.stream().min(Integer::compareTo);"]}),"\n",(0,r.jsx)(n.p,{children:"maxNumber.ifPresent(System.out::println); // Affiche : 10\r\nminNumber.ifPresent(System.out::println); // Affiche : 2"}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Distinction (distinct)"}),": Retourne un flux contenant uniquement des \xe9l\xe9ments distincts.\r\n",(0,r.jsx)(n.code,{children:"List<Integer>"})," numbers = Arrays.asList(1, 2, 3, 1, 2, 4, 5, 3, 6);"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"List<Integer>"})," distinctNumbers = numbers.stream()\r\n.distinct()\r\n.collect(Collectors.toList());"]}),"\n",(0,r.jsx)(n.p,{children:"System.out.println(distinctNumbers); // Affiche : [1, 2, 3, 4, 5, 6]"}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var r=s(6540);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);